import os
import json
import google.generativeai as genai
from django.conf import settings
from bs4 import BeautifulSoup


def extract_form_only(raw_html):
    soup = BeautifulSoup(raw_html, 'html.parser')
    forms = soup.find_all('form')
    return '\n'.join(str(form) for form in forms)


def get_autofill_data(raw_html, user_data):
    try:
        api_key = os.getenv("gemini_api_key")
        form_data = extract_form_only(raw_html)

        # Stage 1: Prompt to generate autofill data
        instructions = (
            "### TASK:\n"
            "You are given raw HTML and user JSON. For each and every input field:\n"
            "I want to fill the html form, so help me to fill it using extension script feature, so for that give me output accordingly such that I can fill that data.\n"
            "1. Identify the matching form field using input[name=''], or '.class_name', or '#id' (prefer name).\n"
            "2. For input fields and textareas, fill with relevant user data or similar to it.\n"
            "3. For select fields, choose the most relevant option based on user data, just give the value of the option don't generate anything else, if none choose last option.\n"
            "4. For radio buttons, select the most relevant option based on user data\n"
            "5. For checkboxes, check the most relevant options based on user data, else check the last option.\n"
            "6. For file inputs, provide 'file url from the user data' as a filled value. Also give required file name, size of the file that needs to be uploaded in kb, pixel values that document need to have (only give in pixel values if they are in different units convert them to pixels)\n"
            "### SPECIAL INSTRUCTIONS FOR FIELD TYPES:\n"
            "- For <select> dropdowns: match the name or id, and select the value closest to user data. If a match isnâ€™t obvious, choose a logically relevant value.\n"
            "- For file inputs: if user JSON contains file URL or document name, assign it. Else, use 'NA'.\n"
            "- For checkboxes or radios: assign 'checked' if the value applies to user, otherwise 'unchecked'.\n"
            "- Always include 'type': 'select', 'file', 'checkbox', 'radio', or 'input' as appropriate.\n"
            "[\n"
            "  {'input[name=\"username\"]': 'JohnDoe', 'type': 'input'},\n"
            "  {'input[name=\"email\"]': 'john@email.com', 'type': 'input'}\n"
            "  {'input[name=\"file\"]': 'file_url', 'type': 'file', 'file_name': 'file_name.ext', 'file_type': 'jpe', 'size':'5kb', 'pixels': '500x600'}"
            "]\n"
            "### RESPONSE:\n"
        )

        # Combine input
        prompt_stage_1 = f"Website Text: {form_data}\nUser JSON: {user_data}\n\n{instructions}"

        # Stage 1: Use Gemini Flash to generate raw autofill data
        genai.configure(api_key=api_key)
        model_flash = genai.GenerativeModel('gemini-2.0-flash')
        response_stage_1 = model_flash.generate_content(
            prompt_stage_1,  
        )
        raw_autofill = "".join(response_stage_1.text.split('\n')[1:-1])

        print("ðŸ”¹ Stage 1 autofill data (raw):", raw_autofill)
        # return raw_autofill

        # Stage 2: Prompt to review and correct autofill data
        review_prompt = (
            "### TASK:\n"
            "You are given HTML form content and user data, along with autofill JSONs generated by another AI model.\n"
            "Your job is to **review** and **improve the accuracy** of the autofill data by:\n"
            "- Validating matches between field names and user data\n"
            "1. For input fields and textareas, fill with relevant user data or similar to it.\n"
            "2. For select fields, choose the most relevant option based on user data, just give the value of the option don't generate anything else, if none choose last option.\n"
            "3. For radio buttons, select the most relevant option based on user data\n"
            "4. For checkboxes, check the most relevant options based on user data, else check the last option.\n"
            "5. For file inputs, provide 'file url from the user data' as a filled value. Also give required file name, size of the file that needs to be uploaded in kb, pixel values that document need to have (only give in pixel values if they are in different units convert them to pixels)\n\n"
            "- Correcting field values if needed\n"
            "- Ensuring logical matches for select/dropdowns, checkboxes, and files\n"
            "- Fixing inconsistent or obviously wrong values\n\n"
            f"Website HTML:\n{form_data}\n\n"
            f"User JSON:\n{user_data}\n\n"
            f"AI-generated autofill JSON:\n{raw_autofill}\n\n"
            "[\n"
            "  {'input[name=\"username\"]': 'JohnDoe', 'type': 'input'},\n"
            "  {'input[name=\"email\"]': 'john@email.com', 'type': 'input'}\n"
            "  {'input[name=\"file\"]': 'file_url', 'type': 'file', 'file_name': 'file_name.ext', 'file_type': 'jpe', 'size':'5kb', 'pixels': '500x600'}"
            "]\n"
            "dont generate anything, any explanations or anything except json response\n"
        )

        # Stage 2: Use Gemini 1.5 Pro to review and refine
        model_refiner = genai.GenerativeModel('gemini-2.0-flash')  # More accurate model
        response_stage_2 = model_refiner.generate_content(review_prompt)
        improved_autofill = "".join(response_stage_2.text.split('\n')[1:-1])

        print("âœ… Stage 2 improved autofill data:", improved_autofill)

        return improved_autofill 
    except Exception as e:
        print(f"Error generating autofill data: {e}")
        return json.dumps([])